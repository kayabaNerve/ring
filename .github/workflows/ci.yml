name: ci
permissions:
  contents: read
on:
  pull_request:
  push:
jobs:
  package:
    # Don't run duplicate `push` jobs for the repo owner's PRs.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: windows-latest

    steps:
      - uses: briansmith/actions-checkout@v4
        with:
          persist-credentials: false

      - run: ./mk/install-build-tools.ps1

      - run: rustup --version

      - run: echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin" >> $GITHUB_PATH
        shell: bash

      - run: sh mk/package.sh
        shell: bash

  # Intentionally excludes benchmarks for build performance reasons.
  test:
    # Don't run duplicate `push` jobs for the repo owner's PRs.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.host_os }}

    strategy:
      matrix:
        # XXX: See `test-features` below.
        features:
          - # Default

        target:
          - aarch64-pc-windows-msvc
          - i686-pc-windows-msvc
          - x86_64-pc-windows-gnu
          - x86_64-pc-windows-msvc

        mode:
          - # debug
          - --release

        rust_channel:
          - stable
          # Keep in sync with Cargo.toml and similar `rust_channel` sections.
          - 1.61.0 # MSRV
          # TODO: Move these to a daily/pre-release job.
          # - nightly
          # - beta

        include:
          - target: aarch64-pc-windows-msvc
            host_os: windows-latest
            cargo_options: --no-run

          - target: i686-pc-windows-msvc
            host_os: windows-latest

          - target: x86_64-pc-windows-gnu
            host_os: windows-latest

          - target: x86_64-pc-windows-msvc
            host_os: windows-latest

    steps:
      - uses: briansmith/actions-checkout@v4
        with:
          persist-credentials: false

      - run: rustup toolchain add --profile=minimal ${{ matrix.rust_channel }}
      - run: rustup target add --toolchain=${{ matrix.rust_channel }} ${{ matrix.target }}

      - if: ${{ !contains(matrix.host_os, 'windows') }}
        run: mk/install-build-tools.sh --target=${{ matrix.target }} ${{ matrix.features }}

      - if: ${{ contains(matrix.host_os, 'windows') }}
        run: ./mk/install-build-tools.ps1

      - if: ${{ matrix.target == 'aarch64-pc-windows-msvc' }}
        run: |
          echo "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin" >> $GITHUB_PATH
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
        shell: bash

      - if: ${{ !contains(matrix.host_os, 'windows') }}
        run: |
          mk/cargo.sh +${{ matrix.rust_channel }} test -vv --target=${{ matrix.target }} ${{ matrix.cargo_options }} ${{ matrix.features }} ${{ matrix.mode }}

      - if: ${{ contains(matrix.host_os, 'windows') }}
        run: |
          cargo +${{ matrix.rust_channel }} test -vv --target=${{ matrix.target }} ${{ matrix.cargo_options }} ${{ matrix.features }} ${{ matrix.mode }}

      # --all-targets doesn't run doctests: https://github.com/rust-lang/cargo/issues/6669
      # Run doctests only on x86_64 to avoid cross-compilation hassles with `--no-run`.
      - if: ${{ !contains(matrix.host_os, 'windows') && contains(matrix.target, 'x86_64') }}
        run: |
          mk/cargo.sh +${{ matrix.rust_channel }} test -vv --doc --target=${{ matrix.target }} ${{ matrix.cargo_options }} ${{ matrix.features }} ${{ matrix.mode }}

      # Check that all the needed symbol renaming was done.
      # TODO: Do this check on Windows too.
      # TODO: Check iOS too.
      # TODO: Do this on Apple-hosted release builds too; currently these fail with:
      #       Unknown attribute kind (528)
      #       (Producer: 'LLVM12.0.0-rust-1.54.0-nightly'
      #       Reader: 'LLVM APPLE_1_1200.0.32.29_0')
      - if: ${{ matrix.target != 'aarch64-apple-ios' &&
                !contains(matrix.host_os, 'windows') &&
                (!contains(matrix.host_os, 'macos') || matrix.mode != '--release') }}
        run: mk/check-symbol-prefixes.sh --target=${{ matrix.target }}

  # XXX: GitHub Actions won't let us test all the combinations of features in
  # the "test" matrix because the resultant matrix would be larger than the
  # maximum they allow.
  test-features:
    # Don't run duplicate `push` jobs for the repo owner's PRs.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ${{ matrix.host_os }}
    strategy:
      matrix:
        features:
          - --no-default-features
          - --features=std,slow_tests

        target:
          - i686-pc-windows-msvc

        mode:
          - --release

        rust_channel:
          - stable
          - nightly
          # Keep in sync with Cargo.toml and similar `rust_channel` sections.
          - 1.61.0 # MSRV

        include:
          - target: i686-pc-windows-msvc
            host_os: windows-latest

    steps:
      - if: ${{ contains(matrix.host_os, 'ubuntu') }}
        run: sudo apt-get update -y

      - uses: briansmith/actions-checkout@v4
        with:
          persist-credentials: false

      - run: rustup toolchain add --profile=minimal ${{ matrix.rust_channel }}
      - run: rustup target add --toolchain=${{ matrix.rust_channel }} ${{ matrix.target }}

      - if: ${{ !contains(matrix.host_os, 'windows') }}
        run: mk/install-build-tools.sh --target=${{ matrix.target }} ${{ matrix.features }}

      - if: ${{ contains(matrix.host_os, 'windows') }}
        run: ./mk/install-build-tools.ps1

      - if: ${{ matrix.target == 'aarch64-pc-windows-msvc' }}
        run: |
          echo "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin" >> $GITHUB_PATH
        shell: bash

      - if: ${{ !contains(matrix.host_os, 'windows') }}
        run: |
          mk/cargo.sh +${{ matrix.rust_channel }} test -vv --target=${{ matrix.target }} ${{ matrix.cargo_options }} ${{ matrix.features }} ${{ matrix.mode }}

      - if: ${{ contains(matrix.host_os, 'windows') }}
        run: |
          cargo +${{ matrix.rust_channel }} test -vv --target=${{ matrix.target }} ${{ matrix.cargo_options }} ${{ matrix.features }} ${{ matrix.mode }}

      # --all-targets doesn't run doctests: https://github.com/rust-lang/cargo/issues/6669
      # Run doctests only on x86_64 to avoid cross-compilation hassles with `--no-run`.
      - if: ${{ !contains(matrix.host_os, 'windows') && contains(matrix.target, 'x86_64') }}
        run: |
          mk/cargo.sh +${{ matrix.rust_channel }} test -vv --doc --target=${{ matrix.target }} ${{ matrix.cargo_options }} ${{ matrix.features }} ${{ matrix.mode }}

      # Check that all the needed symbol renaming was done.
      # TODO: Do this check on Windows too.
      # TODO: Check iOS too.
      # TODO: Do this on Apple-hosted release builds too; currently these fail with:
      #       Unknown attribute kind (528)
      #       (Producer: 'LLVM12.0.0-rust-1.54.0-nightly'
      #       Reader: 'LLVM APPLE_1_1200.0.32.29_0')
      - if: ${{ matrix.target != 'aarch64-apple-ios' &&
          !contains(matrix.host_os, 'windows') &&
          (!contains(matrix.host_os, 'macos') || matrix.mode != '--release') }}
        run: mk/check-symbol-prefixes.sh --target=${{ matrix.target }}

